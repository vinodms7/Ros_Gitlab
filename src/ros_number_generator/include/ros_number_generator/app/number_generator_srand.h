/****************************************************************************
* Copyright (C) 2017 by KPIT Technologies                                  *
*                                                                          *
****************************************************************************/
/**
* @file number_generator_srand.h
* 
* @author Rajat Jayanth Shetty  <rajat.shetty@kpit.com>
* 
* @date 18 Oct 2017
* 
* @brief    Default C++ SRand implemenation of random number generator 
*
*/
#ifndef NUMBER_GENERATOR_SRAND_H
#define NUMBER_GENERATOR_SRAND_H

/*! Include files */
#include <string>
#include "ros_number_generator/core/number_generator_interface.h"

/*! Class Defintions */
template<class T>
class NumberGeneratorSRand : public NumberGenerator<T> {
 public:
   /**
   * Function name: NumberGeneratorSRand
   *
   * @brief Constructor for SRAND generator
   *
   * The constructor initializes the Random generator and specifies the range
   * between which random numbers need to be generator.
   *
   * @param[in]  T max_random_value Maximum range for Random Generator
   * @param[in]  T min_random_value Minimum range for Random Generator
   *
  **/
  NumberGeneratorSRand(T max_random_value = 1000,
                              T min_random_value = 0);
  /**
   * Function name: ~NumberGeneratorSRand
   *
   * @brief Destructor for SRAND generator instance
   *
   **/
  ~NumberGeneratorSRand();

   /**
   * Function name: SetRandomValRange
   *
   * @brief Function call to set the the random genrator range
   *
   * The Range between which the random numbers need to be generator
   *
   * @param[in]  DataType  _nMaxRandomValue Maximum range the Random Generator should generate values within
   * @param[in   DataType  _nMinRandomValue Minimum range the Random Generator should generate values within
   *
   * @return     void
   **/
  void SetRandomValRange(T max_random_value, T min_random_value);

  /**
  * Function name: GetGeneratedNumber
  *
  * @brief Function call to query for Number generator to provide a Random number
  *
  * @param[in]  None
  *
  * @return     T Returns a Random number generated
  **/
  T GetGeneratedNumber();

  /**
  * Function name: GetGeneratorName
  *
  * @brief Function call to query Generator name or Implementation name
  *
  * @param[in]  None
  *
  * @return     std::string  String containing the name of the Random Generator implementation
  **/
  std::string GetGeneratorName() const;

 protected:
  /**
  * Function name: GenerateNumber
  *
  * @brief       Function call containing the actual implementation of the Number Generator
  *
  * @param[in]    None
  *
  * @return      DataType Generates and returns the number generated by the impelementation
  **/
  T GenerateNumber();

  T max_random_value_;       /*! Max random value */
  T min_random_value_;       /*! Min random value */
  T current_seed_;           /*! Current random seed value */
  T current_random_number_;  /*! current random number */
};
  template class NumberGeneratorSRand<uint32_t>;
  template class NumberGeneratorSRand<float>;

#endif /* NUMBER_GENERATOR_SRAND_H */

